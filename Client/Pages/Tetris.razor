@page "/Tetris"
@attribute [Authorize]
@inject IJSRuntime JsRuntime;
@inject IAssetsCollection AssetsCollection
@inject HttpClient httpClient

@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using Gejms.Client.Assets
@using Gejms.Client.Games.Tetris
@using Gejms.Client.Shared.GameServices

<PageTitle>Tetris</PageTitle>

<TetrisAssets OnAssetsLoaded="OnAssetsLoaded" />

<div id="canvasContainer">
    <BECanvas @ref = "canvas" Width = "500" Height= "700"></BECanvas>
</div>


@code {
    private BECanvasComponent canvas;
    private bool isInitialized = false;
    private bool assetsLoaded = false;
    private TetrisGame game;
    private InputSystem inputSystem;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (assetsLoaded && !isInitialized)
        {
            await JsRuntime.InvokeAsync<object>("initialize", DotNetObjectReference.Create(this));
            var context = await canvas.CreateCanvas2DAsync();
            game = new TetrisGame(context, AssetsCollection, JsRuntime, httpClient);
            await game.InitGame();
            inputSystem = GameServicesCollection.Instance.Get<InputSystem>();
            isInitialized = true;
        }
    }

    protected async Task OnAssetsLoaded() {
        assetsLoaded = true;
    }

    [JSInvokable]
    public async ValueTask GameLoop()
    {
        if (isInitialized)
            await this.game.Iterate();
    }

    [JSInvokable]
    public async ValueTask OnKeyDown(int keyCode) => inputSystem.HandleKeyboardKeyDown(keyCode);


    [JSInvokable]
    public async ValueTask OnKeyUp(int keyCode) => inputSystem.HandleKeyboardKeyUp(keyCode);

    [JSInvokable]
    public async ValueTask OnMouseDown(int keyCode) => inputSystem.HandleMouseKeyDown(keyCode);

    [JSInvokable]
    public async ValueTask OnMouseUp(int keyCode) => inputSystem.HandleMouseKeyUp(keyCode);

    [JSInvokable]
    public async ValueTask OnMouseMove(int x, int y) => inputSystem.HandleMouseMove(x, y);
}